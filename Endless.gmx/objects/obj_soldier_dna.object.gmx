<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables and behavior
global.ActivePlayer = id
global.HealthPoints = 100
ready_to_fire = 0
image_speed    = 0
view_object[0] = id


//States sprites &amp; gun info array --Own? --Main sprite --Secondary sprite --CurrentMag --MaxMag --CurrentAmmo --MaxAmmo --ReloadSpeed --RateOfFire --BulletType --UiBulletCounter --Sound
count = 20
while(count &gt; 0)
{
    arr = array_org(0,spr_longgun_stand,0,0,20,0,400,120,0,0,0,snd_FNFAL)             //Fnfal
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,500,0,2000,300,4.5,0,0,snd_Minigun)         //Minigun
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,5,0,115,120,0,0,0,snd_50BMGF)              //50BMG
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,5,0,75,60,5,0,0,snd_ShotyFireandLoad)    //Shoty360
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,1,0,2,0,10,120,1,0,0,snd_AT4)             //At4
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,200,0,1000,210,8,0,0,snd_MG42)            //MG42
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,1,0,2,0,15,210,1,0,0,snd_XL79)            //XL79
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,250,0,1000,90,2,0,0,snd_Scorcher)        //Scorcher
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,spr_ak12_dna,0,30,0,450,45,10,0,0,snd_AK12)  //Ak12
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,10,0,250,120,9,0,0,snd_DROPOGM)          //Dropogm
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,45,0,900,90,8,0,0,snd_HOD)               //HOD
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,spr_g11_dna,0,45,0,450,180,8,0,0,snd_G11)    //G11
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_handgun_stand,0,0,9,0,108,30,0,0,0,snd_DesertEagle)        //DesertEagle
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(1,spr_longgun_stand,spr_m60_dna,0,100,0,600,45,10,0,0,snd_M60)   //M60
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,20,0,180,60,8,0,0,snd_AA12)              //AA12
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,30,0,360,45,8,0,0,snd_M4)                //M4
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,5,0,75,60,40,0,0,snd_Sniper)              //Sniper
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(0,spr_longgun_stand,0,0,2,0,100,90,60,0,0,snd_Nitro)              //Nitro
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(1,spr_longgun_stand,0,0,30,0,270,45,6,0,0,snd_MP9)               //MP9
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(1,spr_longgun_stand,spr_shotgun_dna,8,8,50,56,60,90,0,0,snd_PumpShotgun)         //Shotgun
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
    count--
    arr = array_org(1,spr_handgun_stand,-1,15,15,-1,-1,45,0,0,0,snd_Pistol)         //Pistol
    i = 0
    repeat(12) {active_gun[count,i] = arr[i] i++}
}

//Set Gun
Gun = 0 //Pistol
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload! output
if (active_gun[Gun,5] &gt; active_gun[Gun,4]) or (active_gun[Gun,5] &lt; -1)
    {active_gun[Gun,3] = active_gun[Gun,4]}
else
    {active_gun[Gun,3] = active_gun[Gun,5]}
//Reduce from ammo
active_gun[Gun,5] = active_gun[Gun,5] - active_gun[Gun,3]
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement control

//Keyboard
if keyboard_check(ord("W"))
    {y=y-4 image_speed = 1}
else if keyboard_check(ord("A"))
    {x=x-4 image_speed = 1}
else if keyboard_check(ord("D"))
    {x=x+4 image_speed = 1}
else if keyboard_check(ord("S"))
    {y=y+4 image_speed = 1}
else {image_speed = 0}

//Mouse
direction = point_direction(x,y,mouse_x,mouse_y)

//Shooting control
ready_to_fire--
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///C4 Placement
/*
if (gamepad_button_check_released(0,gp_face2) or keyboard_check_released(ord("F"))) //this is for c4
{
    if (global.C4InStock &gt; 0) //this is if you have c4 in stock
    {
        instance_create(x,y,obj_C4)
        global.C4InStock -= 1
    }
    
    if (global.C4InStock == 0 ) //so if you dont have points
    {
        audio_play_sound(Dry_Fire,1,false) //dry fire if you don thave points
    } 
}
if (gamepad_button_check_released(0,gp_face1) or keyboard_check_released(ord("G"))) //this is for c4 detonation instance check
{
    with(obj_C4)
    {
        if (instance_count == 0)
        {
            audio_play_sound(Dry_Fire,1,false) //dry fire if you don thave points
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health Placement
/*
if (keyboard_check_released(ord("H")) or gamepad_button_check_released(0,gp_padu)) //this is for use of medpacks
{
    scr_HealthPacks()//Health Pack Code Includes Not Using Health if FUll
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place Shotgun Mine
/*
if (gamepad_button_check_released(0,gp_padu) or keyboard_check_released(ord("T")))
{
    if(global.ShotgunMines &gt; 0)
    {
        instance_create(x,y,obj_ShotgunMine)
        global.ShotgunMines -= 1
    }
    else
    {
        audio_play_sound(Dry_Fire,1,false)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_AllAmmoTin">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload all owned weapons
var i = 1
while(i &lt; 20)
    {
     if(active_gun[i,0] == true)
       {active_gun[i,5] = active_gun[i,6]}
     i++
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Previous weapon
var i = Gun - 1
if(i &lt; 0) {i = 20}
while(active_gun[i,0] == false)
    {
     if(i &gt; 0){i--} else {i=0}
    }
Gun = i
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Next weapon
var i = Gun + 1
if(i &gt; 20) {i = 0}
while(active_gun[i,0] == false)
    {
     if(i &lt; 20){i++} else {i=0}
    }
Gun = i
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload input!
/*audio_stop_sound(Shotgun_Reload)
audio_play_sound(Shotgun_Reload,0,1)*/
alarm[1] = active_gun[Gun,7]
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot!
if (ready_to_fire &lt; 1)
{
if(active_gun[Gun,3] &gt; 0)   //check mag
    {
     active_gun[Gun,3]--    //reduce from mag
     active_gun[Gun,5]--    //reduce from ammo
     audio_play_sound(active_gun[Gun,11],1,0)
     bullet = instance_create(x,y,obj_bullet_dna)
     bullet.type = active_gun[Gun,9]
     bullet.direction = direction
     ready_to_fire = active_gun[Gun,8]
    }
    else
    {
     audio_play_sound(snd_DryFire,1,0)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw!
if keyboard_check(vk_control)
    {draw_sprite_ext(active_gun[Gun,1],image_index,x,y,0.25,0.25,direction,c_white,1)}
else
    {draw_sprite_ext(active_gun[Gun,1],image_index,x,y,0.25,0.25,direction,c_white,1)}
    
draw_sprite_ext(active_gun[Gun,2],0,x,y,0.25,0.25,direction,c_white,1)

draw_text(mouse_x,mouse_y,image_index)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
